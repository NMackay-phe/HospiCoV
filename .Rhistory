outlineFr = map_data(map = "france")
vorPolyHosp = voronoi_polygon(mHBase, x = "lng", y = "lat", outline = outlineFr)
ggmap(France) + geom_path(data = fortify_voronoi(vorPolyHosp), aes(lon))
ggmap(France) + geom_path(data = fortify_voronoi(vorPolyHosp))
ggmap(France, base_layer = ggplot(data = mHBase,aes(x = lng, y = lat))) +
stat_voronoi( geom = "path" , outline = outlineFr) +
geom_point(size = 1, color = "red")
ggmap(France, base_layer = ggplot(data = mHBase,aes(x = lng, y = lat))) +
stat_voronoi( geom = "path" , outline = outlineFr, color = "blue") +
geom_point(size = 1, color = "red")
View(outlineFr)
unique(outlineFr$region)
?map_data
outlineFr = map_data(map = "france", fill = TRUE)
outlineFr = map(database = "france", fill = TRUE)
outlineFr = map(database = "france", boundary = FALSE)
outlineFr = map(database = "france", boundary = TRUE)
outlineFr = map(database = "france", interior = FALSE)
outlineFr = map_data(map = "world", region = "france")
ggplot(outlineFr,aes(x=long,y=lat,group=group)) +
geom_polygon(aes(fill=id),color="grey30")
ggplot(outlineFr,aes(x=long,y=lat,group=group)) +
geom_polygon(color="grey30")
ggmap(France, base_layer = ggplot(data = mHBase,aes(x = lng, y = lat))) +
stat_voronoi( geom = "path" , outline = outlineFr, color = "blue") +
geom_point(size = 1, color = "red")
France = get_map(c(left = -5, top = 51, right = 8.5, bottom = 42), source = "osm")
ggmap(France, base_layer = ggplot(data = mHBase,aes(x = lng, y = lat))) +
stat_voronoi( geom = "path" , outline = outlineFr, color = "blue") +
geom_point(size = 1, color = "red")
France = get_map(c(left = -5, top = 51.3, right = 8.5, bottom = 41.7), source = "osm")
ggmap(France, base_layer = ggplot(data = mHBase,aes(x = lng, y = lat))) +
stat_voronoi( geom = "path" , outline = outlineFr, color = "blue") +
geom_point(size = 1, color = "red")
France = get_map(c(left = -5, top = 51.3, right = 8.5, bottom = 41.7),
source = "openstreetmap")
France = get_map(c(left = -5, top = 51.3, right = 8.5, bottom = 41.7),
source = "google")
ggmap(France)
France
# functions computing the voronoi tesselisations
register_google(key = "AIzaSyA8RT3PHkYKa26aTKCXv75Ey6OYy6xL1ys")
France = get_map(c(left = -5, top = 51.3, right = 8.5, bottom = 41.7),
source = "google")
France
vorPolyHosp = voronoi_polygon(mHBase, x = "lng", y = "lat", outline = outlineFr)
vorPolyHosp
library(leaflet)
vorPolyHosp %>%
leaflet() %>%
addTiles()
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines()
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addMarkers()
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addMarkers(lng = mHBase$lng, lat = mHBase$lat)
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addCircleMarkers(lng = mHBase$lng,
lat = mHBase$lat,
opacity = 0.8)
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addCircleMarkers(lng = mHBase$lng,
lat = mHBase$lat,
opacity = 0.8,
size = 1)
?addCircleMarkers
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addCircleMarkers(lng = mHBase$lng,
lat = mHBase$lat,
opacity = 0.8,
radius = 2)
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addCircleMarkers(lng = mHBase$lng,
lat = mHBase$lat,
opacity = 0.8,
radius = 2,
color = "red")
str(vorPolyHosp)
## Wrapper function running the C++ model
library(Rcpp)
sourceCpp("./src/SARSCoVModel.cpp")
View(engine_run)
## define a parameter object
library(R6)
vignette("R6")
?vignette
seq(0,80,5)
length(seq(0,80,5))
source("R/Parameters.R")
params = Parameters$new()
params
params$preExposed
eig = eigen(self$contact)
contact = diag(1, nrow = self$nage, ncol = self$nage)
nage
nage = 18
contact = diag(1, nrow = nage, ncol = nage)
contact
eigen(contact)
eig = eigen(contact)
R0
R0 = 3
removal = 1/6
R0 * removal/max(Re(eig$values))
eig$values
Re(eig$values)
contact = matrix(1, nrow = nage, ncol = nage)
eig = eigen(contact)
R0 * removal/max(Re(eig$values))
Re(eig$values)
sourceCpp("./src/SARSCoVModel.cpp")
sourceCpp("./src/SARSCoVModel.cpp")
?sourceCpp
sourceCpp("./src/SARSCoVModel.cpp", verbose = TRUE)
sourceCpp("./src/SARSCoVModel.cpp", verbose = TRUE, rebuild = TRUE)
vorPolyHosp %>%
leaflet() %>%
addTiles() %>%
addPolylines() %>%
addCircleMarkers(lng = mHBase$lng,
lat = mHBase$lat,
opacity = 0.8,
radius = 2,
color = "red")
library(devtools)
build()
install()
install()
library(usethis)
use_data_raw()
source('~/Google Drive/1-EPC/1-HospiCoV/HospiCoV/data-raw/ContactMatrix.R')
usethis::use_data()
library(usethis)
?use_data
usethis::use_data(contact_matrix)
usethis::use_data(population_contact)
use_package(R6)
use_package("R6")
use_package(c("ggplot2", "ggvoronoi", "openxlsx", "data.table", "stringr","leaflet"))
use_package("ggplot2")
use_package("ggvoronoi")
use_package("openxlsx")
use_package("data.table")
use_package("stringr")
use_package("leaflet")
use_package("shiny")
install.packages(c("betareg", "bookdown", "boot", "broom", "car", "checkmate", "classInt", "countrycode", "covr", "DBI", "deldir", "deSolve", "devtools", "DiagrammeR", "dplyr", "DT", "e1071", "exactRankTests", "farver", "fields", "flextable", "fma", "FME", "forcats", "forecast", "foreign", "fracdiff", "ggplot2", "ggpubr", "ggraph", "hexbin", "highlight", "Hmisc", "hms", "htmlTable", "KernSmooth", "knitr", "labelled", "lattice", "latticeExtra", "lifecycle", "Matching", "mgcv", "modelr", "modeltools", "mstate", "multcomp", "mvtnorm", "nlme", "nloptr", "nnet", "officer", "optimx", "outbreaker2", "pagedown", "pbkrtest", "plotly", "plyr", "polspline", "pomp", "quadprog", "quantreg", "R.methodsS3", "raster", "RcppArmadillo", "RCurl", "repr", "rgexf", "RgoogleMaps", "rmarkdown", "rms", "rootSolve", "rsconnect", "rversions", "rzmq", "servr", "sf", "shinyjs", "shinyWidgets", "socialmixr", "sp", "SparseM", "spatstat", "spatstat.data", "spatstat.utils", "survey", "tidyr", "tidyselect", "tinytex", "TTR", "units", "uuid", "V8", "vctrs", "VGAM", "webshot", "xfun", "XML", "xts", "yesno", "zoo"))
version
library(shinyCov)
shinyCov::run_app()
library(usethis)
use_package("foreign")
use_package("maptools")
library(HospiCov)
run_app()
HospiCov::contact_matrix
library(HospiCov)
run_app()
library(HospiCov)
run_app()
HospiCov:::run_app()
library(HospiCov)
HospiCov::run_app()
HospiCov:::run_app()
library(maptools)
outlineFr = maptools::map_data(map = "world", region = "france")
library(maptools)
outlineFr = maptools::map_data(map = "world", region = "france")
outlineFr = maps::map_data(map = "world", region = "france")
outlineFr = raster::map_data(map = "world", region = "france")
?map_data
outlineFr = ggplot2::map_data(map = "world", region = "france")
outlineFr = ggplot2::map_data(map = "world", region = "france")
usethis::use_data(outlineFr)
Population <- readRDS("~/Google Drive/1-EPC/1-HospiCoV/HospiCoV/data-raw/Population.rds")
#### Save of the results ####
#saveRDS(pop_town, file = "./Data/Population.rds")
usethis::use_data(Population)
gadm36_FRA_0_sp <- readRDS("~/Google Drive/1-EPC/1-HospiCoV/HospiCoV/data/gadm36_FRA_0_sp.rds")
info_etab = fread("data-raw/info_etab.csv")
usethis::use_data(info_etab)
hospCovid = data.table(read.xlsx("data-raw/Hopitaux_covid.xlsx"))
usethis::use_data(hospCovid)
hospCovid = data.table(read.xlsx("data-raw/Hopitaux_covid.xlsx"))
hospCovid[, FINESS_GEO := as.character(FINESS_GEO)]
hospCovid[, FINESS_GEO := str_pad(FINESS_GEO, 9 , pad = "0")]
usethis::use_data(hospCovid)
usethis::use_data(hospCovid, overwrite = TRUE)
library(HospiCov)
library(HospiCov)
library(HospiCov)
run_app()
??voronoi_polygon
?voronoi_polygon
?leaflet
?SpatialPointsDataFrame
?over
library(HospiCov)
library(HospiCov)
run_app()
library(HospiCov)
run_app()
usethis::use_package("sp")
library(HospiCov)
library(HospiCov)
info_etab
population_contact
population_contact[, LIBGEO:=stringi::stri_trans_general(LIBGEO, "latin-ascii")]
population_contact
?stri_trans_general
stri_trans_list()
stringi::stri_trans_list()
population_contact[, LIBGEO := stringi::stri_trans_general(LIBGEO, "latin-ASCII")]
population_contact
population_contact[, LIBGEO := stringi::stri_trans_general(LIBGEO, "latin-fr")]
population_contact[, LIBGEO := stringi::stri_trans_general(LIBGEO, "latin-ASCII")]
usethis::use_data(population_contact)
usethis::use_data(population_contact, overwrite = TRUE)
names(info_etab)
info_etab$address
names(info_etab)
info_etab$RS
stringi::stri_trans_general(info_etab$RS, "latin-ASCII")
stringi::stri_enc_toascii(info_etab$RS)
info_etab$RS
stringi::stri_enc_toutf8(info_etab$RS)
stringi::stri_enc_toascii(info_etab$RS)
info_etab[ RS := stri_enc_toascii(RS)]
info_etab = fread("data-raw/info_etab.csv")
info_etab[ RS := stri_enc_toascii(RS)]
info_etab[ , RS := stri_enc_toascii(RS)]
library(stringi)
info_etab[ , RS := stri_enc_toascii(RS)]
info_etab[ , address := stri_enc_toascii(address)]
usethis::use_data(info_etab)
usethis::use_data(info_etab, overwrite = TRUE)
info_etab$cat
info_etab[ , cat := stri_enc_toascii(cat)]
usethis::use_data(info_etab, overwrite = TRUE)
library(HospiCov)
shiny_app()
HospiCov::contact_matrix
eig = eigen(contact_matrix)
eig
3*(1/6)/max(Re(eig$values))
?sidebarPanel
library(HospiCov)
shiny_app()
shiny_app()
info_etab = fread("data-raw/info_etab.csv")
info_etab = fread("data-raw/info_etab.csv")
info_etab[ , RS := stri_enc_toascii(RS)]
info_etab[ , address := stri_enc_toascii(address)]
info_etab[ , cat := stri_enc_toascii(cat)]
usethis::use_data(info_etab, overwrite = TRUE)
hospCovid = data.table(read.xlsx("data-raw/Hopitaux_covid.xlsx"))
??read.xlsx
library(openxlsx)
hospCovid = data.table(read.xlsx("data-raw/Hopitaux_covid.xlsx"))
hospCovid[, FINESS_GEO := as.character(FINESS_GEO)]
hospCovid[, FINESS_GEO := str_pad(FINESS_GEO, 9 , pad = "0")]
library(stringi)
library(stringr)
hospCovid[, FINESS_GEO := str_pad(FINESS_GEO, 9 , pad = "0")]
hospCovid <- hospCovid[!is.na(Ligne),]
usethis::use_data(hospCovid, overwrite = TRUE)
library(HospiCov)
shiny_app()
??voronoi
library(ggvoronoi)
?voronoi_polygon
?fortify_voronoi
?voronoi_polygon
library(deldir )
??deldir
?deldir
#build parameter object
params = Parameters$new()
## Test run the model
library(HospiCov)
#build parameter object
params = Parameters$new()
#build parameter object
params = HospiCov::Parameters$new()
library(HospiCov)
#build parameter object
params = Parameters$new()
library(HospiCov)
#build parameter object
params = Parameters$new()
params
library(HospiCov)
population = PolyHosp$new()
population
population$vorPop
dim(population$vorPop)
str(population$vorPop)
names(population$vorPop)
Population
dim(Population)
names(Population)
population_contact
names(population_contact)
hospCovid
population
population$vorHBase
?addCircleMarkers
population$vorPolyHosp
names(population$vorPolyHosp)
library(HospiCov)
shiny_app()
names(population_contact)
names(population$vorPolyHosp)
names(population$vorPop)
# Identification of the towns in each Voronoi polygon #
data_towns <- copy(population_contact)
towns <- SpatialPointsDataFrame(data_towns[,.(lng,lat)],
data = data_towns)
library(s)
library(sp)
towns <- SpatialPointsDataFrame(data_towns[,.(lng,lat)],
data = data_towns)
vorPolyHosp
vorPolyHosp = population$vorPolyHosp
data_towns[, FINESS_Voronoi := over(towns, vorPolyHosp)[, "FINESS_GEO"]]
data_towns
# Compute the population per age per sex per Voronoi polygon #
pop_Voronoi <- data_towns[, lapply(.SD, sum),
.SDcols = grep("SEXE", names(data_towns)),
by = "FINESS_Voronoi"]
pop_Voronoi
grep("SEXE", names(data_towns)
)
grep("SEX", names(data_towns))
grep("AGE", names(data_towns))
names(data_towns)
grep("^AGE", names(data_towns))
# Compute the population per age per sex per Voronoi polygon #
pop_Voronoi <- data_towns[, lapply(.SD, sum),
.SDcols = grep("^AGE", names(data_towns)),
by = "FINESS_Voronoi"]
pop_Voronoi
pop_Voronoi[FINESS_Voronoi == "710978289"]
names(data_towns)
over(towns, vorPolyHosp)
data_towns[, FINESS_Voronoi := over(towns, vorPolyHosp)[, c("FINESS_GEO","Region"]]
# Compute the population per age per sex per Voronoi polygon #
pop_Voronoi <- data_towns[, lapply(.SD, sum),
.SDcols = grep("^AGE", names(data_towns)),
by = "FINESS_Voronoi"]
return(pop_Voronoi)
},
# finess_to_merge : vector of tessels' FINESS to be merged
voronoi_tessel_merge = function(vorPolyHosp, finess_to_merge, name_merge) {
# Creation of a vector of IDs #
original_data <- as.data.table(vorPolyHosp@data)
original_data[, ID := .I]
vec_ids <- original_data[, ID]
# Identification of the tessels to unite in the SpatialPolygonDataframe #
index <- which(original_data[,FINESS_GEO] %in% finess_to_merge)
new_index <- max(vec_ids) + 1
vec_ids[index] <- new_index
# Update of the data frame #
new_data <- original_data[-index,]
modified_data <- original_data[index,
lapply(.SD, sum),
.SDcols = c(grep("LIT", names(original_data)),
grep("SEJHC", names(original_data)),
grep("JOU", names(original_data)),
grep("PLA", names(original_data)),
grep("SEJHP", names(original_data)))]
modified_data <- cbind(modified_data,
t(spatial.median(original_data[index,c("lat","lng")])))
modified_data[, ":=" ("Libelle" = name_merge,
"ID" = new_index,
"FINESS_GEO" = new_index)]
# Merge the tessels #
new_vorPolyHosp <- SpatialPolygonsDataFrame(unionSpatialPolygons(vorPolyHosp, vec_ids),
data = rbind(new_data,
modified_data,
fill = TRUE),
match.ID = "ID")
return(new_vorPolyHosp)
}
)
data_towns[, FINESS_Voronoi := over(towns, vorPolyHosp)[, c("FINESS_GEO","Region")]]
data_towns[, .(FINESS_Voronoi,Region) := over(towns, vorPolyHosp)[, c("FINESS_GEO","Region")]]
data_towns[, c("FINESS_Voronoi","Region") := over(towns, vorPolyHosp)[, c("FINESS_GEO","Region")]]
data_towns
# Compute the population per age per sex per Voronoi polygon #
pop_Voronoi <- data_towns[, lapply(.SD, sum),
.SDcols = grep("^AGE", names(data_towns)),
by = "FINESS_Voronoi"]
pop_Voronoi
# Compute the population per age per sex per Voronoi polygon #
pop_Voronoi <- data_towns[, lapply(.SD, sum),
.SDcols = grep("^AGE", names(data_towns)),
by = c("Region","FINESS_Voronoi")]
pop_Voronoi
library(HospiCov)
#build parameter object
params = Parameters$new()
population = PolyHosp$new()
vorhosp = PolyHosp$new()
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
vorhosp$getPopRegion("Bretagne")
self$vorPopRegion
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
vorhosp$getPopRegion("Bretagne")
params
params$contact
dim(params$contact)
#run the model
pop = vorhosp$getPopRegion("Bretagne")
dim(pop)
pop
pop[1]
pop[[1]]
unlist(pop)
pop[[]]
pop[1]
pop[1][]
pop[1][1]
pop[1][[1]]
pop[[1]][]
pop[[2]][]
pop[[-1]][]
unlist(pop[,-1])
nrow(contact_matrix)
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
pop = vorhosp$getPopRegion("Bretagne")
res = runMod(params = params, sname = "test", population = pop)
library(HospiCov)
res = runMod(params = params, sname = "test", population = pop)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
pop = vorhosp$getPopRegion("Bretagne")
res = runMod(params = params, sname = "test", population = pop)
Q
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
pop = vorhosp$getPopRegion("Bretagne")
res = runMod(params = params, sname = "test", population = pop)
engine_run
engine_run()
engine_run(params = params, init = NULL)
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
pop = vorhosp$getPopRegion("Bretagne")
res = runMod(params = params, sname = "test", population = pop)
devtools::build()
devtools::build(binary = TRUE)
library(HospiCov)
library(HospiCov)
#build parameter object
params = Parameters$new()
vorhosp = PolyHosp$new()
#run the model
pop = vorhosp$getPopRegion("Bretagne")
res = runMod(params = params, sname = "test", population = pop)
library(HospiCov)
?Call
?.Call
is.loaded(`_HospiCov_engine_run`)
is.loaded(`_HospiCov_engine_run`, PACKAGE = "HospiCoV")
library(Rcpp)
res = runMod(params = params, sname = "test", population = pop)
